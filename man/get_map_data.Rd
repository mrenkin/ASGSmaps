% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/api_function.R
\name{get_map_data}
\alias{get_map_data}
\title{API wrapper to access the Australian Statistical Geography Standard from the
Australian Bureau of Statistics.}
\usage{
get_map_data(
  service,
  standard,
  where = NULL,
  text = NULL,
  objectIds = NULL,
  time = NULL,
  geometry = NULL,
  geometryType = "esriGeometryEnvelope",
  inSR = NULL,
  spatialRel = "esriSpatialRelIntersects",
  distance = NULL,
  units = "esriSRUnit_Foot",
  relationParam = NULL,
  outfields = "*",
  returnGeometry = "true",
  returnTrueCurves = "false",
  maxAllowableOffset = NULL,
  geometryPrecision = NULL,
  outSR = NULL,
  havingClause = NULL,
  returnIdsOnly = "false",
  returnCountOnly = "false",
  orderByFields = NULL,
  groupByFieldsForStatistics = NULL,
  outStatistics = NULL,
  returnZ = "false",
  returnM = "false",
  gdbVersion = NULL,
  historicMoment = NULL,
  returnDistinctValues = "false",
  resultOffset = NULL,
  resultRecordCount = NULL,
  returnExtentOnly = "false",
  datumTransformation = NULL,
  parameterValues = NULL,
  rangeValues = NULL,
  quantizationParameters = NULL,
  featureEncoding = "esriDefaultNULL",
  f = "geojson"
)
}
\arguments{
\item{service}{A string specifying the name of the map service to be queried.
Should match a single element from the list of \code{\link[ASGSmaps:available_services]{available_services}}.}

\item{standard}{A string matching a single element from the list of available_standards.
Should match a single element from the list of \code{\link[ASGSmaps:available_standards]{available_standards}}.}

\item{where}{SQL query for a string contained in one of the \code{\link[ASGSmaps:standard_fields]{standard_fields}}.
Any legal SQL WHERE clause operating on the fields in the layer is allowed.}

\item{text}{A string to search for in the layer. Example: text = "New South Wales"}

\item{objectIds}{A comma-separated list of object IDs. Example: objectIds = "1, 2, 3"}

\item{time}{A time extent for the query. Time value is specified in number of milliseconds since January 1, 1970 (Unix epoch time).}

\item{geometry}{A geometry for the query.
Example: geometry = "{xmin: 144.3577 ymin: -34.57995 xmax: 146.4928 ymax: -32.67125}"}

\item{geometryType}{The type of geometry specified by the geometry parameter. Possible values: "esriGeometryPoint", "esriGeometryMultipoint", "esriGeometryPolyline", "esriGeometryPolygon", "esriGeometryEnvelope".}

\item{inSR}{The spatial reference of the input geometry.}

\item{spatialRel}{The spatial relationship to be applied on the input geometry. Possible values: "esriSpatialRelIntersects", "esriSpatialRelContains", "esriSpatialRelCrosses", "esriSpatialRelEnvelopeIntersects", "esriSpatialRelIndexIntersects", "esriSpatialRelOverlaps", "esriSpatialRelTouches", "esriSpatialRelWithin", "esriSpatialRelRelation".}

\item{distance}{The buffer distance for the input geometry. The distance value and units must be specified with the units parameter. Example: distance = 100}

\item{units}{The unit of measurement for the distance parameter. Possible values: "esriSRUnit_Meter", "esriSRUnit_StatuteMile", "esriSRUnit_NauticalMile", "esriSRUnit_Kilometer", "esriSRUnit_USNauticalMile".}

\item{relationParam}{The relationship parameter for the spatial relationship. Used only when the spatialRel parameter is set to "esriSpatialRelRelation".}

\item{outfields}{A comma-separated list of attribute fields to be included in the response. See \code{\link[ASGSmaps:standard_fields]{standard_fields}}.}

\item{returnGeometry}{Whether to include the geometry in the response.}

\item{returnTrueCurves}{Whether to return true curves in the output geometry.}

\item{maxAllowableOffset}{The maximum allowable offset for the output geometry.}

\item{geometryPrecision}{The number of decimal places in the output geometry.}

\item{outSR}{The spatial reference of the output geometry.}

\item{havingClause}{The having clause to be used in the query.}

\item{returnIdsOnly}{Whether to return only the object IDs. Default: FALSE. .}

\item{returnCountOnly}{Whether to return only the count of features that satisfy the query.}

\item{orderByFields}{A comma-separated list of fields to order by.}

\item{groupByFieldsForStatistics}{A comma-separated list of fields to group by in the statistics.}

\item{outStatistics}{The statistics to be calculated for the query.}

\item{returnZ}{Whether to include z-values in the output geometry.}

\item{returnM}{Whether to include m-values in the output geometry.}

\item{gdbVersion}{The geodatabase version to use in the query.}

\item{historicMoment}{The date and time to query the data as of.}

\item{returnDistinctValues}{Whether to return distinct values in the response.}

\item{resultOffset}{The number of features to skip in the response.}

\item{resultRecordCount}{The maximum number of features to return in the response.}

\item{returnExtentOnly}{Whether to return only the bounding box of the query geometry.}

\item{datumTransformation}{The datum transformation to use in the query.}

\item{parameterValues}{The values to be used for query parameters.}

\item{rangeValues}{The range values for the query.}

\item{quantizationParameters}{The quantization parameters to be used for the query.}

\item{featureEncoding}{The feature encoding to be used in the response. Possible values: "esriDefault", "esriJson", "geoJson".}

\item{f}{The format of the response. Possible values: "html", "json", "geojson", "kmz", "pbf".}
}
\value{
A simple features dataframe.#'
}
\description{
API wrapper to access the Australian Statistical Geography Standard from the
Australian Bureau of Statistics.
}
\details{
More information about Request Parameters can be found at
\href{https://developers.arcgis.com/rest/services-reference/enterprise/query-map-service-layer-.htm}{ArcGIS REST APIs}
}
\examples{
# get map data for two local government areas "Bland Shire Council" and
# "Carrathool Shire Council" from the 2022 update of ASGS Edition 3 service and
# the "LGA" standard

map <- get_map_data(
  service = "ASGS2022",
  standard = "LGA",
  where = "LGA_NAME_2022 IN ('Bland', 'Carrathool')"
)

plot(map$geometry)


# get all map data from the 2021 update of ASGS Edition 3 service and
# the "STE" standard.

map <- get_map_data(
  service = "ASGS2021",
  standard = "STE",
  where = "1=1"
)

plot(map$geometry)

}
